import {useBalance, useBlockHeader, useBlockHeaders, useCall, useCallSubscription, useChainRpc, useChainRpcList, useContract, useDryRun, useEventSubscription, useEvents, useInstalledWallets, useTx, useTxPaymentInfo, useUninstalledWallets, useWallet,} from 'useink';
import abstractedAccountMetadata from '../../metadata/abstractedAccount.json';
import { RustResult, formatBalance, isBroadcast, isFinalized, isInBlock, isPendingSignature, pickDecoded, pickDecodedError, pickResultErr, pickResultOk, pickTxInfo, shouldDisable,} from 'useink/utils';
import { useNotifications, useTxNotifications } from 'useink/notifications';

import accountManagerFactoryMetadata from '../../metadata/accountManagerFactory.json';



function Car(props) 
{
    const accountManagerFactoryAddress = props.address;
    const accountManagerFactoryContract = useContract(accountManagerFactoryAddress, accountManagerFactoryMetadata, 'shibuya-testnet');

    const accountAddressConnectedToFactory = props.userConnected;
    const shibuyaGetAaVectorSubscriptionComponent = useCallSubscription<boolean>(accountManagerFactoryContract, 'getAccountAaVec', [accountAddressConnectedToFactory]);


    const { addNotification } = useNotifications();

    return (
        <div>
            <div>
                <h2>Hi, I am a Car! with the address: {props.address}</h2>
            </div>


            <div>
                <h2>simpleAaAddressesDisplay FROM COMPONENT: {pickDecoded(shibuyaGetAaVectorSubscriptionComponent.result)?.toString() || '--'}</h2>
            </div>


            <div>
                <h2>USER CONNECTED ADDRESS: {props.userConnected}</h2>
            </div>
        </div>
    );
}

  export default Car;